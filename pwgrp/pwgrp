#!/bin/sh

# error codes:
# 0 : ok
# 1 : config / file / test error
# 2 : bad syntax
# 3 : user is not root

# if user is not root, program terminates
if [ "$(id -u)" != "0" ]; then
    echo `basename $0 :` "error: you are not root" >&2
    exit 3
fi

# file with subrutines used in program
. common.subr
#. /usr/local/share/pwgrp/common.subr
# initialization and exporting of variables
set -o allexport
SYSTEM_CONFIG="/usr/local/etc/pwgrp.conf"
VERSION="1.0"
APG_FLAGS="-m 6 -x 6 -M NCL"
USER_COMMENT=""
USERS_FILE=""
OUTPUT="/dev/stdout"
QUOTAS="NO"
QUOTA_BLOCK_HARD="0"
QUOTA_BLOCK_SOFT="0"
QUOTA_INODE_HARD="0"
QUOTA_INODE_SOFT="0"
QUOTA_CAPABLE="NO"
QUOTA_USER_CAPABLE="NO"
FILE_SYSTEM="/home"
GENERATE_PASSWORD="NO"
PROGRAM_NAME=`basename $0`
TEMPLATE="/usr/local/share/pwgrp/templates/template"
SERVER="localhost"
SUBJECT="New account!"
set +o allexport

help()
{
    cat <<EOF
Usage: `basename $0` -a file [-C config] [-p] [-A flags] [-Q] [-f fs] [-c commennt] [-b val] [-B val] [-i val] [-I val]
                     -q file [-f fs] [-b val] [-B val] [-i val] [-I val]
                     -r file - remove users in file
                     -h - prints this help
                     -V - prints version of this program
                     -l file - lock users in file
                     -L file - unlock users in file
EOF
}

version()
{
    cat <<EOF
pwgrp v$VERSION by Stefan Miklosovic - miklosovic@gmail.com
EOF
}

# if there is zero or one argument at command line
if [ $# -le 1 ]; then
    case $1 in
        -h) help ; exit 0 ;;
        -V) version ; exit 0 ;;
		*) help ; exit 1 ;;
	esac
fi

# if there is at least two arguments at command line
if [ $# -ge 2 ]; then
    case $1 in
        -a) FLAG=$1
        while getopts ":a:A:C:c:i:I:b:B:f:o:t:Qp" opt; do
            case $opt in
                a) USERS_FILE=$OPTARG;;
                b)
                    if check_size_block "$OPTARG"; then
                        QUOTA_BLOCK_SOFT=$OPTARG
                    else
                        echo "$PROGRAM_NAME: error: value of -$opt argument is not valid size"
                        exit 2
                    fi
                    ;;
                C) SYSTEM_CONFIG=$OPTARG;;
                f) FILE_SYSTEM=$OPTARG;;
                i)
                    if check_inode $OPTARG; then
                        QUOTA_INODE_SOFT=$OPTARG
                    else
                        echo "$PROGRAM_NAME: error: value of -$opt argument is not valid"
                        exit 2
                    fi
                    ;;
                p) GENERATE_PASSWORD="YES";;
                A) APG_FLAGS="$OPTARG";;
                B)
                    if check_size_block $OPTARG; then
                        QUOTA_BLOCK_HARD=$OPTARG
                    else
                        echo "$PROGRAM_NAME: error: value of -$opt argument is not valid size"
                        exit 2
                    fi
                    ;;
                c) USER_COMMENT="$OPTARG";;
                I)
                    if check_inode $OPTARG; then
                        QUOTA_INODE_HARD=$OPTARG
                    else
                        echo "$PROGRAM_NAME: error: value of -$opt argument is not valid size"
                        exit 2
                    fi
                    ;;
                Q) QUOTAS="YES"; check_quotas add; ;;
		o) OUTPUT="$OPTARG";;
                :) echo "$PROGRAM_NAME: option -$OPTARG requires an argument" >&2; exit 2;;
                \?) help ; exit 2;;
            esac
        done
		;;
		-q) FLAG=$1;
            QUOTAS="YES"
            #check_quotas quota
            while getopts ":q:i:I:b:B:f:t:" opt; do
                case $opt in
                    b)
                        if check_size_block $OPTARG; then
                            QUOTA_BLOCK_SOFT=$OPTARG
                        else
                            echo "$PROGRAM_NAME: error: value of -$opt argument is not valid size"
                            exit 2
                        fi
                        ;;
                    f) FILE_SYSTEM=$OPTARG;;
                    i)
                        if check_inode $OPTARG; then
                            QUOTA_INODE_SOFT=$OPTARG
                        else
                            echo "$PROGRAM_NAME: error: value of -$opt argument is not valid"
                            exit 2
                        fi
                        ;;
                    q) USERS_FILE=$OPTARG;;
                    I)
                        if check_inode $OPTARG; then
                            QUOTA_INODE_HARD=$OPTARG
                        else
                            echo "$PROGRAM_NAME: error: value of -$opt argument is not valid size"
                            exit 2
                        fi
                        ;;
                    B)
                        if check_size_block $OPTARG; then
                            QUOTA_BLOCK_HARD=$OPTARG
                        else
                            echo "$PROGRAM_NAME: error: value of -$opt argument is not valid size"
                            exit 2
                        fi
                        ;;
                    :) echo "$PROGRAM_NAME: option -$OPTARG requires an argument" >&2; exit 2;;
                    \?) help ; exit 2;;
                esac
            done
            check_quotas quota
            ;;
        -r) FLAG=$1; USERS_FILE=$2
#            check_quotas remove
            if [ ! -z $3 ]; then
                help
                exit 2
            fi
            ;;
        -l) FLAG=$1; USERS_FILE=$2
            ;;
        -L) FLAG=$1; USERS_FILE=$2
            ;;
        -m) FLAG=$1; USERS_FILE=$2
            while getopts ":m:t:s:S:" opt; do
                case $opt in
                    t) TEMPLATE=$OPTARG;;
                    s) SERVER=$OPTARG;;
                    S) SUBJECT=$OPTARG;;
                esac
            done
            ;;
        *) help; exit 1;;
    esac
fi

case "$FLAG" in
    -a) if is_valid $USERS_FILE; then add_users $USERS_FILE; fi ;;
    -q) if is_valid $USERS_FILE; then set_quotas_file $USERS_FILE; fi ;;
    -r) if is_valid $USERS_FILE; then remove_users $USERS_FILE; fi ;;
    -l) if is_valid $USERS_FILE; then lock_users $USERS_FILE; fi ;;
    -L) if is_valid $USERS_FILE; then unlock_users $USERS_FILE; fi ;;
    -m) if is_valid $USERS_FILE; then send_mail "$USERS_FILE" "$TEMPLATE" "$SERVER" "$SUBJECT"; fi ;;
esac

exit 0
